#include <iostream>
#include<vector>
using namespace std;

int main() {
	vector<int>v;
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);
	cout<<v[0]<<endl;
	cout<<v[1]<<endl;
	cout<<v[2]<<endl;
	return 0;
}



------------------TREENODE CLASS-------------------
#include<vector>
using namespace std;
template <typename T>
class TreeNode {
    public:
     T data;
     vector<TreeNode<T>*>children;
     TreeNode(T element) {
         this->data = data;
     }
     ~TreeNode() {
         for(int i=0;i<root->childre.size();i++) {
             delete children[i];
         }
     }
};



-------------------MAIN FUNCTION-------------

#include<iostream>
#include "TreeNode.h"
using namespace std;

void printTree(TreeNode<int>*root) {
    if(root == NULL) {
        return;
    }
    cout<<root->data<<<<":"<<endl;
    for(int i=0;i<root->children.size);i++) {
        cout<<root->children[i]->data<<",";
    } 
    cout<<endl;
    for(int i=0;i<root->children.size();i++) {
        printTree(root->children[i])<<endl;
    }
}

TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cout<<"Enter root Data" <<endl;
    cin>>rootData;
    TreeNode<int>*root = new TreeNode<int>(rootData);
    queue<TreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
    while(pendingNodes.size!=0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        cout<<"Enter num of children of "<<front->data<<endl;
        int numchild;
        cin>>numchild;
        for(int i=0;i<numchild;i++) {
            int childData;
            cout<<"Enter "<<i<<"th child of "<<front->data<<endl;
            cin>>childData;
            TreeNode<int>*child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
        
    }
    return root;
}

void printAtLevelK(TreeNode<int>*root,k) {
    if(root==NULL) {
        return;
    }
    if(k==0) {
        return;
    }
    for(int i=0;i<root->children.size();i++) {
        cout<<printAtLevelK(root->children[i],k-1)<<endl;
    }
}

int printLeaf(TreeNode<int>*root) {
    if(root==NULL) {
        return 0;
    }
    if(root->data==NULL) {
        return 1;
    }
    int sum=0; 
    for(int i=0;i<root->children.size();i++) {
        int sum+= printLeaf(root->children[i]);
    }
    return sum;
}


void preOrder(TreeNode<int>*root) {
    if(root==NULL) {
        return;
    }
    cout<<root->data<<" ";
    for(int i=0;i<root->children.size();i++) {
        preOrder(root->children[i]);
    }
}
void postOrder(TreeNode<int>*root) {
    if(root==NULL) {
        return;
    }
    for(int i=0;i<root->children.size();i++) {
        postOrder(root->children[i]);
    }
    cout<<root->data<<" ";
}


void deleteTree(TreeNode<int>*root) {
    if(root==NULL) {
        return;
    }
    for(int i=0;i<root->children.size();i++) {
        deleteTree(root->children[i]);
    }
    delete root;
}









int numNodes<TreeNode<int>*root) {
    if(root==NULL) {
        return 0;
    }
    int ans =1;
    for(int i=0;i<root->children.size();i++) {
        ans+=numNodes(root->children[i]);
    }
    return ans;
}












TreeNode<int>* takeInput(TreeNode<int>*root) {
    int rootData;
    cout<<"Enter Data"<<endl;
    cin>>rootData;
    TreeNode<int>*root = new TreeNode<int>(rootdata);
    int n;
    cout<<"Enter num of children of"<<rootdata<<endl;
    cin>>n;
    for(int i=0;i<n;i++) {
        TreeNode<int>*child = takeInput();
        root->children.push_back(child);
    }
    return root;
}

int main(){
    TreeNode<int>*root = new TreeNode<int>(2);
    TreeNode<int>*node1 = new TreeNode<int>(4);
    TreeNode<int>*node2 = new TreeNode<int>(6);
    root->children.push_back(node1);
    root->children.push_back(node2);
}


